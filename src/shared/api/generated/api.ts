/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name = "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    fileType?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    timeUnit?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    path?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    creationDate?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    lastUsage?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001
     */
    message?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001
     */
    code?: number;
    /**
     * 
     * @type {InlineResponse2001Result}
     * @memberof InlineResponse2001
     */
    result?: InlineResponse2001Result;
}
/**
 * 
 * @export
 * @interface InlineResponse2001Result
 */
export interface InlineResponse2001Result {
    /**
     * 
     * @type {InlineResponse2001ResultPred}
     * @memberof InlineResponse2001Result
     */
    pred?: InlineResponse2001ResultPred;
}
/**
 * 
 * @export
 * @interface InlineResponse2001ResultPred
 */
export interface InlineResponse2001ResultPred {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001ResultPred
     */
    datetime?: string;
}
/**
 * 
 * @export
 * @interface PredictionRequest
 */
export interface PredictionRequest {
    /**
     * 
     * @type {number}
     * @memberof PredictionRequest
     */
    steps: number;
    /**
     * 
     * @type {PredictionTimeUnit}
     * @memberof PredictionRequest
     */
    predictionTimeUnit: PredictionTimeUnit;
    /**
     * 
     * @type {string}
     * @memberof PredictionRequest
     */
    predictionType: string;
}
/**
 * 
 * @export
 * @interface PredictionRequest1
 */
export interface PredictionRequest1 {
    /**
     * 
     * @type {number}
     * @memberof PredictionRequest1
     */
    steps: number;
    /**
     * 
     * @type {PredictionTimeUnit}
     * @memberof PredictionRequest1
     */
    predictionTimeUnit: PredictionTimeUnit;
    /**
     * 
     * @type {string}
     * @memberof PredictionRequest1
     */
    predictionType: string;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum PredictionTimeUnit {
    D = <any> 'D',
    W = <any> 'W',
    M = <any> 'M',
    Y = <any> 'Y'
}
/**
 * 
 * @export
 * @interface SetTURequest
 */
export interface SetTURequest {
    /**
     * 
     * @type {string}
     * @memberof SetTURequest
     */
    timeUnit: string;
}
/**
 * 
 * @export
 * @interface SetTURequest1
 */
export interface SetTURequest1 {
    /**
     * 
     * @type {string}
     * @memberof SetTURequest1
     */
    timeUnit: string;
}
/**
 * APIApi - fetch parameter creator
 * @export
 */
export const APIApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *      Endppoint that allows user delete data he loaded previously     
         * @summary Manually delete record and file
         * @param {number} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAPIDeleteFile(fileId: number, options: any = {}): FetchArgs {
            // verify required parameter 'fileId' is not null or undefined
            if (fileId === null || fileId === undefined) {
                throw new RequiredError('fileId','Required parameter fileId was null or undefined when calling deleteAPIDeleteFile.');
            }
            const localVarPath = `/api/delete/{file_id}`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *      Endpoint that returns info about all records     
         * @summary All records info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAPIAllRecords(options: any = {}): FetchArgs {
            const localVarPath = `/api/records`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *      Endpoint that returns info about one record     
         * @summary One records info
         * @param {number} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAPIOneRecord(fileId: number, options: any = {}): FetchArgs {
            // verify required parameter 'fileId' is not null or undefined
            if (fileId === null || fileId === undefined) {
                throw new RequiredError('fileId','Required parameter fileId was null or undefined when calling getAPIOneRecord.');
            }
            const localVarPath = `/api/records/{file_id}`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *      Endpoint that allows to download a file to server. Creates record in DB if successful. Requires a file!     
         * @summary Loader endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAPILoadFile(options: any = {}): FetchArgs {
            const localVarPath = `/api/load`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *      Endpoint returning prediction dataset.     
         * @summary Predict endpoint returning predictions dataset
         * @param {number} fileId 
         * @param {PredictionRequest1} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAPIMakePredictions(fileId: number, body?: PredictionRequest1, options: any = {}): FetchArgs {
            // verify required parameter 'fileId' is not null or undefined
            if (fileId === null || fileId === undefined) {
                throw new RequiredError('fileId','Required parameter fileId was null or undefined when calling postAPIMakePredictions.');
            }
            const localVarPath = `/api/predict/{file_id}`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PredictionRequest1" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *      Enpoint that allows to specify Time Unit for uploaded data     
         * @summary Put time unit value for a record
         * @param {number} fileId 
         * @param {SetTURequest1} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAPISetTu(fileId: number, body?: SetTURequest1, options: any = {}): FetchArgs {
            // verify required parameter 'fileId' is not null or undefined
            if (fileId === null || fileId === undefined) {
                throw new RequiredError('fileId','Required parameter fileId was null or undefined when calling putAPISetTu.');
            }
            const localVarPath = `/api/set_time_unit/{file_id}`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SetTURequest1" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * APIApi - functional programming interface
 * @export
 */
export const APIApiFp = function(configuration?: Configuration) {
    return {
        /**
         *      Endppoint that allows user delete data he loaded previously     
         * @summary Manually delete record and file
         * @param {number} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAPIDeleteFile(fileId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = APIApiFetchParamCreator(configuration).deleteAPIDeleteFile(fileId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *      Endpoint that returns info about all records     
         * @summary All records info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAPIAllRecords(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<InlineResponse200>> {
            const localVarFetchArgs = APIApiFetchParamCreator(configuration).getAPIAllRecords(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *      Endpoint that returns info about one record     
         * @summary One records info
         * @param {number} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAPIOneRecord(fileId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse200> {
            const localVarFetchArgs = APIApiFetchParamCreator(configuration).getAPIOneRecord(fileId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *      Endpoint that allows to download a file to server. Creates record in DB if successful. Requires a file!     
         * @summary Loader endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAPILoadFile(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = APIApiFetchParamCreator(configuration).postAPILoadFile(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *      Endpoint returning prediction dataset.     
         * @summary Predict endpoint returning predictions dataset
         * @param {number} fileId 
         * @param {PredictionRequest1} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAPIMakePredictions(fileId: number, body?: PredictionRequest1, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2001> {
            const localVarFetchArgs = APIApiFetchParamCreator(configuration).postAPIMakePredictions(fileId, body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *      Enpoint that allows to specify Time Unit for uploaded data     
         * @summary Put time unit value for a record
         * @param {number} fileId 
         * @param {SetTURequest1} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAPISetTu(fileId: number, body?: SetTURequest1, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = APIApiFetchParamCreator(configuration).putAPISetTu(fileId, body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * APIApi - factory interface
 * @export
 */
export const APIApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         *      Endppoint that allows user delete data he loaded previously     
         * @summary Manually delete record and file
         * @param {number} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAPIDeleteFile(fileId: number, options?: any) {
            return APIApiFp(configuration).deleteAPIDeleteFile(fileId, options)(fetch, basePath);
        },
        /**
         *      Endpoint that returns info about all records     
         * @summary All records info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAPIAllRecords(options?: any) {
            return APIApiFp(configuration).getAPIAllRecords(options)(fetch, basePath);
        },
        /**
         *      Endpoint that returns info about one record     
         * @summary One records info
         * @param {number} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAPIOneRecord(fileId: number, options?: any) {
            return APIApiFp(configuration).getAPIOneRecord(fileId, options)(fetch, basePath);
        },
        /**
         *      Endpoint that allows to download a file to server. Creates record in DB if successful. Requires a file!     
         * @summary Loader endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAPILoadFile(options?: any) {
            return APIApiFp(configuration).postAPILoadFile(options)(fetch, basePath);
        },
        /**
         *      Endpoint returning prediction dataset.     
         * @summary Predict endpoint returning predictions dataset
         * @param {number} fileId 
         * @param {PredictionRequest1} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAPIMakePredictions(fileId: number, body?: PredictionRequest1, options?: any) {
            return APIApiFp(configuration).postAPIMakePredictions(fileId, body, options)(fetch, basePath);
        },
        /**
         *      Enpoint that allows to specify Time Unit for uploaded data     
         * @summary Put time unit value for a record
         * @param {number} fileId 
         * @param {SetTURequest1} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAPISetTu(fileId: number, body?: SetTURequest1, options?: any) {
            return APIApiFp(configuration).putAPISetTu(fileId, body, options)(fetch, basePath);
        },
    };
};

/**
 * APIApi - object-oriented interface
 * @export
 * @class APIApi
 * @extends {BaseAPI}
 */
export class APIApi extends BaseAPI {
    /**
     *      Endppoint that allows user delete data he loaded previously     
     * @summary Manually delete record and file
     * @param {number} fileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public deleteAPIDeleteFile(fileId: number, options?: any) {
        return APIApiFp(this.configuration).deleteAPIDeleteFile(fileId, options)(this.fetch, this.basePath);
    }

    /**
     *      Endpoint that returns info about all records     
     * @summary All records info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public getAPIAllRecords(options?: any) {
        return APIApiFp(this.configuration).getAPIAllRecords(options)(this.fetch, this.basePath);
    }

    /**
     *      Endpoint that returns info about one record     
     * @summary One records info
     * @param {number} fileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public getAPIOneRecord(fileId: number, options?: any) {
        return APIApiFp(this.configuration).getAPIOneRecord(fileId, options)(this.fetch, this.basePath);
    }

    /**
     *      Endpoint that allows to download a file to server. Creates record in DB if successful. Requires a file!     
     * @summary Loader endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public postAPILoadFile(options?: any) {
        return APIApiFp(this.configuration).postAPILoadFile(options)(this.fetch, this.basePath);
    }

    /**
     *      Endpoint returning prediction dataset.     
     * @summary Predict endpoint returning predictions dataset
     * @param {number} fileId 
     * @param {PredictionRequest1} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public postAPIMakePredictions(fileId: number, body?: PredictionRequest1, options?: any) {
        return APIApiFp(this.configuration).postAPIMakePredictions(fileId, body, options)(this.fetch, this.basePath);
    }

    /**
     *      Enpoint that allows to specify Time Unit for uploaded data     
     * @summary Put time unit value for a record
     * @param {number} fileId 
     * @param {SetTURequest1} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public putAPISetTu(fileId: number, body?: SetTURequest1, options?: any) {
        return APIApiFp(this.configuration).putAPISetTu(fileId, body, options)(this.fetch, this.basePath);
    }

}
/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Greet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getgreet(options: any = {}): FetchArgs {
            const localVarPath = `/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Greet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getgreet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getgreet(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Greet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getgreet(options?: any) {
            return DefaultApiFp(configuration).getgreet(options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Greet
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getgreet(options?: any) {
        return DefaultApiFp(this.configuration).getgreet(options)(this.fetch, this.basePath);
    }

}
